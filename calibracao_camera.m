% Auto-generated by stereoCalibrator app on 05-Sep-2024
%-------------------------------------------------------

% Define paths to image files
imagePathsCam1 = {'C:\Users\LCE\Documents\GitHub\Scanner_3D\img_cam_27\camera27_20240905_164947.jpg',...
    'C:\Users\LCE\Documents\GitHub\Scanner_3D\img_cam_27\camera27_20240905_164952.jpg',...
    'C:\Users\LCE\Documents\GitHub\Scanner_3D\img_cam_27\camera27_20240905_165027.jpg',...
    'C:\Users\LCE\Documents\GitHub\Scanner_3D\img_cam_27\camera27_20240905_165131.jpg',...
    'C:\Users\LCE\Documents\GitHub\Scanner_3D\img_cam_27\camera27_20240905_165516.jpg',...
    'C:\Users\LCE\Documents\GitHub\Scanner_3D\img_cam_27\camera27_20240905_165521.jpg',...
    'C:\Users\LCE\Documents\GitHub\Scanner_3D\img_cam_27\camera27_20240905_165532.jpg',...
    'C:\Users\LCE\Documents\GitHub\Scanner_3D\img_cam_27\camera27_20240905_165548.jpg'};

imagePathsCam2 = {'C:\Users\LCE\Documents\GitHub\Scanner_3D\img_cam_28\camera28_20240905_164947.jpg',...
    'C:\Users\LCE\Documents\GitHub\Scanner_3D\img_cam_28\camera28_20240905_164952.jpg',...
    'C:\Users\LCE\Documents\GitHub\Scanner_3D\img_cam_28\camera28_20240905_165027.jpg',...
    'C:\Users\LCE\Documents\GitHub\Scanner_3D\img_cam_28\camera28_20240905_165131.jpg',...
    'C:\Users\LCE\Documents\GitHub\Scanner_3D\img_cam_28\camera28_20240905_165516.jpg',...
    'C:\Users\LCE\Documents\GitHub\Scanner_3D\img_cam_28\camera28_20240905_165521.jpg',...
    'C:\Users\LCE\Documents\GitHub\Scanner_3D\img_cam_28\camera28_20240905_165532.jpg',...
    'C:\Users\LCE\Documents\GitHub\Scanner_3D\img_cam_28\camera28_20240905_165548.jpg'};

% Create the checkerboard detector
checkerboardDetector = vision.calibration.stereo.CheckerboardDetector();

% Detect calibration pattern in images
[imagePoints, imagesUsed] = detectPatternPoints(checkerboardDetector, imagePathsCam1, imagePathsCam2);

% Generate world coordinates for the planar pattern keypoints
squareSizeMM = 15;  % Size of one square in millimeters
worldPoints = generateWorldPoints(checkerboardDetector, 'SquareSize', squareSizeMM);

% Read the first image from the first camera
sampleImage = imread(imagePathsCam1{1});
[imageHeight, imageWidth, ~] = size(sampleImage);

% Calibrate the camera
[stereoParams, pairsUsed, estimationErrors] = estimateCameraParameters(imagePoints, worldPoints, ...
    'EstimateSkew', false, 'EstimateTangentialDistortion', false, ...
    'NumRadialDistortionCoefficients', 2, 'WorldUnits', 'millimeters', ...
    'ImageSize', [imageHeight, imageWidth]);

% Display reprojection errors
figure; 
showReprojectionErrors(stereoParams);

% Visualize camera extrinsics
figure; 
showExtrinsics(stereoParams, 'CameraCentric');

% Display parameter estimation errors
figure; 
displayErrors(estimationErrors, stereoParams);

% Rectify stereo images
sampleImageCam2 = imread(imagePathsCam2{1});
[rectifiedImage1, rectifiedImage2, ~] = rectifyStereoImages(sampleImage, sampleImageCam2, stereoParams);

% Process images for edge detection
grayImage1 = rgb2gray(rectifiedImage1);
grayImage2 = rgb2gray(rectifiedImage2);

edgeImage1 = edge(grayImage1, 'Canny');
edgeImage2 = edge(grayImage2, 'Canny');

% Show detected edges
figure;
subplot(1,2,1); imshow(edgeImage1); title('Bordas - Imagem 1');
subplot(1,2,2); imshow(edgeImage2); title('Bordas - Imagem 2');

% Estimate disparity between rectified images
disparityMap = disparity(grayImage1, grayImage2);

% Create the point cloud from the disparity map
pointCloud = reconstructScene(disparityMap, stereoParams);

% Visualize the point cloud
figure;
pcshow(pointCloud, 'VerticalAxis', 'Y', 'VerticalAxisDir', 'Down', 'MarkerSize', 100);
title('Nuvem de Pontos 3D');
xlabel('X (milímetros)');
ylabel('Y (milímetros)');
zlabel('Z (milímetros)');

% Generate a mesh from the point cloud (optional, if needed)
triangulation = delaunayTriangulation(pointCloud(:,1:2));
mesh = triangulate(triangulation, pointCloud);

% Visualize the 3D mesh
figure;
trisurf(mesh, 'FaceColor', 'cyan', 'EdgeColor', 'none');
title('Modelo 3D da PCB');
xlabel('X (milímetros)');
ylabel('Y (milímetros)');
zlabel('Z (milímetros)');
